{"version":3,"sources":["Temperature.js","Humidity.js","App.js","serviceWorker.js","index.js"],"names":["ReactFC","fcRoot","FusionCharts","Widgets","FusionTheme","Temperature","state","temperature","fetch","then","res","json","data","setState","value","catch","console","log","chartConfigs","type","width","height","dataFormat","dataSource","chart","caption","lowerLimit","upperLimit","showValue","numberSuffix","theme","showToolTip","colorRange","color","minValue","maxValue","code","dials","dial","this","Component","Humidity","humidity","App","className","id","href","xmlns","fill","stroke","stroke-linecap","stroke-linejoin","stroke-width","aria-hidden","viewBox","focusable","d","cx","cy","r","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.56162b91.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport Widgets from \"fusioncharts/fusioncharts.widgets\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\n\nReactFC.fcRoot(FusionCharts, Widgets, FusionTheme);\n\nclass Temperature extends Component {\n\n  state = {\n    temperature: \"\"\n  };\n\n  componentDidMount() {\n    const device_id = \"UGB-PILOTS_Sensor200\";\n    const sensor_id = \"TP\";\n\n    \n    fetch(\n      `https://api.waziup.io/api/v2/devices/${device_id}/sensors/${sensor_id}`\n    )\n      .then(res => res.json())\n      .then(data => this.setState({temperature: data.value.value}))\n      .catch(console.log);\n  }\n\n  render() {\n\n    const chartData = {\n      chart: {\n        caption: \"Temperature Gauge\",\n        lowerLimit: \"0\",\n        upperLimit: \"100\",\n        showValue: \"1\",\n        numberSuffix: \"C\",\n        theme: \"fusion\",\n        showToolTip: \"0\"\n      },\n      colorRange: {\n        color: [\n          {\n            minValue: \"0\",\n            maxValue: \"50\",\n            code: \"#F2726F\"\n          },\n          {\n            minValue: \"50\",\n            maxValue: \"75\",\n            code: \"#FFC533\"\n          },\n          {\n            minValue: \"75\",\n            maxValue: \"100\",\n            code: \"#62B58F\"\n          }\n        ]\n      },\n      dials: {\n        dial: [\n          {\n            value: this.state.temperature\n          }\n        ]\n      }\n    };\n\n    const chartConfigs = {\n      type: \"angulargauge\",\n      width: \"100%\",\n      height: 400,\n      dataFormat: \"json\",\n      dataSource: chartData\n    };\n\n    return (\n      <ReactFC {...chartConfigs} />\n    );\n  }\n\n}\n\nexport default Temperature;","import React, { Component } from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport Widgets from \"fusioncharts/fusioncharts.widgets\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\n\nReactFC.fcRoot(FusionCharts, Widgets, FusionTheme);\n\nclass Humidity extends Component {\n\n  state = {\n    humidity: \"\"\n  };\n\n  componentDidMount() {\n    const device_id = \"humid\";\n    const sensor_id = \"humid\";\n\n    \n    fetch(\n      `https://api.waziup.io/api/v2/devices/${device_id}/sensors/${sensor_id}`\n    )\n      .then(res => res.json())\n      .then(data => this.setState({humidity: data.value.value}))\n      .catch(console.log);\n  }\n\n  render() {\n\n    const chartData = {\n      chart: {\n        caption: \"Humidity Gauge\",\n        lowerLimit: \"0\",\n        upperLimit: \"100\",\n        showValue: \"1\",\n        numberSuffix: \"%\",\n        theme: \"fusion\",\n        showToolTip: \"0\"\n      },\n      colorRange: {\n        color: [\n          {\n            minValue: \"0\",\n            maxValue: \"50\",\n            code: \"#F2726F\"\n          },\n          {\n            minValue: \"50\",\n            maxValue: \"75\",\n            code: \"#FFC533\"\n          },\n          {\n            minValue: \"75\",\n            maxValue: \"100\",\n            code: \"#62B58F\"\n          }\n        ]\n      },\n      dials: {\n        dial: [\n          {\n            value: `${this.state.humidity}%`\n          }\n        ]\n      }\n    };\n\n    const chartConfigs = {\n      type: \"angulargauge\",\n      width: \"100%\",\n      height: 400,\n      dataFormat: \"json\",\n      dataSource: chartData\n    };\n\n    return (\n      <ReactFC {...chartConfigs} />\n    );\n  }\n\n}\n\nexport default Humidity;","import React, { Component } from \"react\";\nimport FusionCharts from \"fusioncharts\";\nimport Widgets from \"fusioncharts/fusioncharts.widgets\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\n\nimport Temperature from \"./Temperature\";\nimport Humidity from \"./Humidity\";\n\n\nReactFC.fcRoot(FusionCharts, Widgets, FusionTheme);\n\nclass App extends Component {\n  \n\n  render() {\n    \n\n    return (\n      <>\n        <header>\n          <div className=\"collapse bg-dark\" id=\"navbarHeader\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-sm-8 col-md-7 py-4\">\n                  <h4 className=\"text-white\">About</h4>\n                  <p className=\"text-muted\">\n                    Add some information about the album below, the author, or\n                    any other background context. Make it a few sentences long\n                    so folks can pick up some informative tidbits. Then, link\n                    them off to some social networking sites or contact\n                    information.\n                  </p>\n                </div>\n                <div className=\"col-sm-4 offset-md-1 py-4\">\n                  <h4 className=\"text-white\">Contact</h4>\n                  <ul className=\"list-unstyled\">\n                    <li>\n                      <a href=\"#\" className=\"text-white\">\n                        Follow on Twitter\n                      </a>\n                    </li>\n                    <li>\n                      <a href=\"#\" className=\"text-white\">\n                        Like on Facebook\n                      </a>\n                    </li>\n                    <li>\n                      <a href=\"#\" className=\"text-white\">\n                        Email me\n                      </a>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"navbar navbar-dark bg-dark shadow-sm\">\n            <div className=\"container d-flex justify-content-between\">\n              <a href=\"#\" className=\"navbar-brand d-flex align-items-center\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"20\"\n                  height=\"20\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"2\"\n                  aria-hidden=\"true\"\n                  className=\"mr-2\"\n                  viewBox=\"0 0 24 24\"\n                  focusable=\"false\"\n                >\n                  <path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\" />\n                  <circle cx=\"12\" cy=\"13\" r=\"4\" />\n                </svg>\n                <strong>Nbrains</strong>\n              </a>\n              <button\n                className=\"navbar-toggler\"\n                type=\"button\"\n                data-toggle=\"collapse\"\n                data-target=\"#navbarHeader\"\n                aria-controls=\"navbarHeader\"\n                aria-expanded=\"false\"\n                aria-label=\"Toggle navigation\"\n              >\n                <span className=\"navbar-toggler-icon\"></span>\n              </button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"album py-5 bg-light\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <div className=\"card mb-4 shadow-sm\">\n                  <Temperature />\n                </div>\n              </div>\n\n              <div className=\"col-md-6\">\n                <div className=\"card mb-4 shadow-sm\">\n                  <Humidity />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}